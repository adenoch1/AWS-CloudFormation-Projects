AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Sample template demonstrating Parameters, Mappings, Rules, Conditions,
  Metadata (Interface, Authentication, Init), UserData with cfn-init/cfn-signal,
  cfn-hup, CreationPolicy, and Outputs.

################################################################################
# Top-level Metadata with the three special keys
################################################################################
Metadata:
  # 1) AWS::CloudFormation::Interface — groups and labels parameters
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: "Network Configuration" }
        Parameters: [ VPCId, SubnetId, SSHLocation ]
      - Label: { default: "Instance Configuration" }
        Parameters: [ KeyName, InstanceType, EnvType ]
    ParameterLabels:
      VPCId:        { default: "VPC ID" }
      SubnetId:     { default: "Subnet ID" }
      SSHLocation:  { default: "SSH CIDR Range" }
      KeyName:      { default: "EC2 KeyPair Name" }
      InstanceType: { default: "EC2 Instance Type" }
      EnvType:      { default: "Environment Type" }

  # 2) AWS::CloudFormation::Authentication — IAM role/S3 access for pulling assets
  AWS::CloudFormation::Authentication:
    S3AccessCreds:
      type: S3
      buckets:
        - !Ref ConfigBucket
      roleName: !Ref ConfigRole

################################################################################
# PARAMETERS
################################################################################
Parameters:
  ConfigBucket:
    Type: String
    Description: "Name of S3 bucket holding config files"
  ConfigRole:
    Type: String
    Description: "IAM Role that grants S3 read access"

  VPCId:
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Type: AWS::EC2::Subnet::Id

  SSHLocation:
    Type: String
    Default: 0.0.0.0/0
    Description: "The CIDR block that can SSH to the instance"

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Existing EC2 KeyPair to enable SSH access"

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t3.micro
      - t3.small
    Description: "EC2 instance type"

  EnvType:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: "Deployment environment (dev or prod)"

################################################################################
# MAPPINGS
################################################################################
Mappings:
  RegionMap:
    us-east-1: { AMI: ami-0c94855ba95c71c99 }
    us-west-2: { AMI: ami-0b898040803850657 }
    eu-west-1: { AMI: ami-047bb4163c506cd98 }

################################################################################
# RULES
################################################################################
Rules:
  ValidateSSHLocation:
    RuleCondition: !Not [ !Equals [ !Ref SSHLocation, "" ] ]
    Assertions:
      - Assert:
          Fn::Matches:
            - !Ref SSHLocation
            - "^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$"
        AssertDescription: "SSHLocation must be a valid CIDR (e.g., 203.0.113.0/24)"

################################################################################
# CONDITIONS
################################################################################
Conditions:
  IsProd: !Equals [ !Ref EnvType, prod ]

################################################################################
# RESOURCES
################################################################################
Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerInstance:
    Type: AWS::EC2::Instance

    # 3) Resource-level Metadata: AWS::CloudFormation::Init
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              aws-cfn-bootstrap: []
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMI ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet:
            - !Ref WebServerSecurityGroup

      # UserData runs cfn-init and then sends a signal
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}

    # CreationPolicy waits for the cfn-signal before marking CREATE_COMPLETE
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

################################################################################
# OUTPUTS
################################################################################
Outputs:
  InstanceId:
    Description: The EC2 Instance ID
    Value: !Ref WebServerInstance

  AvailabilityZone:
    Description: AZ of the instance
    Value: !GetAtt WebServerInstance.AvailabilityZone

  PublicIP:
    Description: Public IP of the instance
    Value: !GetAtt WebServerInstance.PublicIp

  WebURL:
    Description: URL for the Apache web server
    Value: !Sub "http://${WebServerInstance.PublicDnsName}/"
