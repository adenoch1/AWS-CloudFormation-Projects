# check condition2.yml for the usage of the exported properties
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Network stack: creates a VPC with public and private subnets, Internet Gateway,
  Route Tables and exports the VPC and subnet IDs for other stacks.

Parameters:
  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/[0-9]{1,2})$"
    ConstraintDescription: must be a valid CIDR range (e.g. 10.0.0.0/16)

Mappings:
  RegionMap:
    us-east-1:
      AZs: [us-east-1a, us-east-1b]
    us-west-2:
      AZs: [us-west-2a, us-west-2b]

Conditions:
  CreatePrivateSubnets: !Not [ !Equals [ !Ref VpcCidr, "10.0.0.0/16" ] ]

Rules:
  VpcCidrValidation:
    RuleCondition:
      Fn::Not:
        - Fn::Equals:
            - !Ref VpcCidr
            - ""
    Assertions:
      - Assert:
          Fn::Or:
            - Fn::Equals:
                - !Ref VpcCidr
                - "192.168.0.0/16"
            - Fn::Equals:
                - !Ref VpcCidr
                - "192.168.0.0/24"
        AssertDescription: VpcCidr must be either 192.168.0.0/16 or 192.168.0.0/24


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "network-stack-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidr, 2, 26 ] ]
      AvailabilityZone: !Select [ 0, !FindInMap [ RegionMap, !Ref "AWS::Region", AZs ] ]
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcCidr, 2, 26 ] ]
      AvailabilityZone: !Select [ 1, !FindInMap [ RegionMap, !Ref "AWS::Region", AZs ] ]
      MapPublicIpOnLaunch: true

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Condition: CreatePrivateSubnets
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Ref VpcCidr, 4, 26 ] ]
      AvailabilityZone: !Select [ 0, !FindInMap [ RegionMap, !Ref "AWS::Region", AZs ] ]

Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: network-stack-vpc-id

  PublicSubnetIds:
    Description: The IDs of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
    Export:
      Name: network-stack-public-subnet-ids
